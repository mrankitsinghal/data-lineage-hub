[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "data-lineage-hub"
version = "1.0.0"
description = "Data Lineage Hub POC with OpenLineage and OpenTelemetry"
authors = ["Ankit Singhal <mrankitsinghal@gmail.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

# Core dependencies
fastapi = "0.116.1"
uvicorn = "0.35.0"
pydantic = "2.11.7"
pydantic-settings = "2.10.1"

# OpenLineage
openlineage-python = "1.37.0"

# OpenTelemetry (for FastAPI internal instrumentation)
opentelemetry-api = "1.36.0"
opentelemetry-sdk = "1.36.0"
opentelemetry-instrumentation = "0.57b0"
opentelemetry-instrumentation-fastapi = "0.57b0"
opentelemetry-instrumentation-requests = "0.57b0"

# Kafka
confluent-kafka = "2.11.1"

# Database drivers
clickhouse-driver = "0.2.9"
psycopg2-binary = "2.9.10"

# Utilities
python-dotenv = "1.1.1"
structlog = "25.4.0"
httpx = "0.28.1"
pandas = "2.3.2"
numpy = "2.3.2"
pyyaml = "6.0.2"
python-multipart = "0.0.20"

[tool.poetry.group.dev.dependencies]
# Development tools
pytest = "8.4.1"
pytest-asyncio = "1.1.0"
ruff = "0.12.11"
mypy = "1.17.1"
pandas-stubs = "^2.3.2.250827"
pre-commit = "^4.3.0"

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11+
target-version = "py311"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".venv",
    "data/",
    "logs/",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",      # pycodestyle errors
    "E7",      # pycodestyle errors
    "E9",      # pycodestyle errors
    "F",       # Pyflakes
    "W",       # pycodestyle warnings
    "I",       # isort
    "N",       # pep8-naming
    "UP",      # pyupgrade
    "YTT",     # flake8-2020
    "S",       # flake8-bandit
    "BLE",     # flake8-blind-except
    "FBT",     # flake8-boolean-trap
    "B",       # flake8-bugbear
    "A",       # flake8-builtins
    "COM",     # flake8-commas
    "C4",      # flake8-comprehensions
    "DTZ",     # flake8-datetimez
    "T10",     # flake8-debugger
    "EM",      # flake8-errmsg
    "FA",      # flake8-future-annotations
    "ISC",     # flake8-implicit-str-concat
    "ICN",     # flake8-import-conventions
    "G",       # flake8-logging-format
    "INP",     # flake8-no-pep420
    "PIE",     # flake8-pie
    "T20",     # flake8-print
    "PYI",     # flake8-pyi
    "PT",      # flake8-pytest-style
    "Q",       # flake8-quotes
    "RSE",     # flake8-raise
    "RET",     # flake8-return
    "SLF",     # flake8-self
    "SLOT",    # flake8-slots
    "SIM",     # flake8-simplify
    "TID",     # flake8-tidy-imports
    "TCH",     # flake8-type-checking
    "INT",     # flake8-gettext
    "ARG",     # flake8-unused-arguments
    "PTH",     # flake8-use-pathlib
    "ERA",     # eradicate
    "PD",      # pandas-vet
    "PGH",     # pygrep-hooks
    "PL",      # Pylint
    "TRY",     # tryceratops
    "FLY",     # flynt
    "NPY",     # NumPy-specific rules
    "PERF",    # Perflint
    "LOG",     # flake8-logging
    "RUF",     # Ruff-specific rules
]

ignore = [
    "S101",    # Use of assert detected
    "S104",    # Possible binding to all interfaces
    "S108",    # Probable insecure usage of temp file/directory
    "S311",    # Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "ISC001",  # Implicitly concatenated string literals on one line (conflicts with formatter)
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default value in function definition
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "TRY003",  # Avoid specifying long messages outside the exception class
    "EM101",   # Exception must not use a string literal, assign to variable first
    "EM102",   # Exception must not use an f-string literal, assign to variable first
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-first-party = ["src"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # Use of assert detected
    "PLR2004", # Magic value used in comparison
    "ARG001",  # Unused function argument
]
"scripts/*" = [
    "T201",    # print found
    "S602",    # subprocess call with shell=True
]

[tool.ruff.lint.pylint]
max-args = 10
max-branches = 15
max-returns = 8
max-statements = 60

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "kafka.*",
    "confluent_kafka.*",
    "clickhouse_driver.*",
    "openlineage.*",
    "opentelemetry.*",
    "structlog.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
