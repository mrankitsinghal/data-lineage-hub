version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data

  # PostgreSQL for Marquez
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: marquez
      POSTGRES_PASSWORD: marquez
      POSTGRES_DB: marquez
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marquez -d marquez"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Marquez API for OpenLineage
  marquez:
    image: marquezproject/marquez:0.51.1
    container_name: marquez
    platform: linux/amd64  # Use AMD64 with emulation on ARM64
    ports:
      - "5000:5000"
      - "5001:5001"  # Admin port
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./docker/marquez/marquez.yml:/usr/src/app/marquez.yml
    environment:
      MARQUEZ_CONFIG: /usr/src/app/marquez.yml
    restart: unless-stopped

  # Marquez Web UI
  marquez-web:
    image: marquezproject/marquez-web:0.51.1
    container_name: marquez-web
    platform: linux/amd64  # Use AMD64 with emulation on ARM64
    ports:
      - "3000:3000"
    depends_on:
      - marquez
    environment:
      MARQUEZ_HOST: marquez
      MARQUEZ_PORT: 5000
      WEB_PORT: 3000
    restart: unless-stopped

  # ClickHouse for OTEL data
  clickhouse:
    image: clickhouse/clickhouse-server:25.7
    container_name: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: otel
      CLICKHOUSE_USER: default
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./docker/clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Grafana for visualization
  grafana:
    image: grafana/grafana:12.1.0
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      # Note: ClickHouse plugin should be installed manually after container startup
      # Run: docker exec grafana grafana cli plugins install grafana-clickhouse-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  postgres-data:
  clickhouse-data:
  grafana-data:
  redis-data:
